name: Deploy Catalog Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      ec2_public_ip: ${{ steps.terraform.outputs.ec2_public_ip }}
      cognito_user_pool_id: ${{ steps.terraform.outputs.cognito_user_pool_id }}
      cognito_user_pool_client_id: ${{ steps.terraform.outputs.cognito_user_pool_client_id }}
      cognito_identity_pool_id: ${{ steps.terraform.outputs.cognito_identity_pool_id }}
      rds_endpoint: ${{ steps.terraform.outputs.rds_endpoint }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Create Terraform variables file
        run: |
          cd terraform
          cat > terraform.tfvars <<EOF
          aws_region = "${{ env.AWS_REGION }}"
          project_name = "catalog-server"
          environment = "production"
          instance_type = "t3.micro"
          key_pair_name = "catalog-server-key"
          allowed_cidr_blocks = ["0.0.0.0/0"]
          db_username = "catalog_user"
          db_password = "${{ secrets.DB_PASSWORD }}"
          db_name = "catalogdb"
          EOF

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Plan
        run: cd terraform && terraform plan -out=tfplan

      - name: Terraform Apply
        id: terraform
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "cognito_user_pool_id=$(terraform output -raw cognito_user_pool_id)" >> $GITHUB_OUTPUT
          echo "cognito_user_pool_client_id=$(terraform output -raw cognito_user_pool_client_id)" >> $GITHUB_OUTPUT
          echo "cognito_identity_pool_id=$(terraform output -raw cognito_identity_pool_id)" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT

  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          SECRET_KEY: test-secret-key
        run: |
          cd backend
          python -c "
          from app import app, db
          with app.app_context():
              db.create_all()
              print('Backend tests passed!')
          "

  build-frontend:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Generate environment file
        run: |
          cd frontend
          cat > .env <<EOF
          REACT_APP_USER_POOL_ID=${{ needs.deploy-infrastructure.outputs.cognito_user_pool_id }}
          REACT_APP_USER_POOL_CLIENT_ID=${{ needs.deploy-infrastructure.outputs.cognito_user_pool_client_id }}
          REACT_APP_IDENTITY_POOL_ID=${{ needs.deploy-infrastructure.outputs.cognito_identity_pool_id }}
          REACT_APP_API_URL=http://${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}
          REACT_APP_AWS_REGION=${{ env.AWS_REGION }}
          EOF

      - name: Build frontend
        run: |
          cd frontend
          
          # First, replace the public/index.html with our simple version
          cp index.html public/index.html
          
          # Build the React app normally - this will generate the JS/CSS bundles
          npm run build
          
          # Verify build contents
          echo "Build directory contents:"
          ls -la build/

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  deploy-application:
    needs: [deploy-infrastructure, test-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Generate backend environment file
        run: |
          cat > backend_env <<EOF
          DATABASE_URL=postgresql://catalog_user:${{ secrets.DB_PASSWORD }}@${{ needs.deploy-infrastructure.outputs.rds_endpoint }}/catalogdb
          SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
          FLASK_ENV=production
          EOF

      - name: Create nginx configuration file
        run: |
          cat > nginx-catalog.conf <<'NGINX_CONF'
          server {
              listen 80;
              server_name _;

              # Serve frontend static files
              location / {
                  root /opt/catalog-server/frontend;
                  index index.html;
                  try_files $uri $uri/ /index.html;
                  
                  # Add headers for better caching
                  add_header Cache-Control "public, max-age=31536000" always;
                  
                  # Handle HTML files differently
                  location ~* \.html$ {
                      add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                  }
              }

              # Proxy ALL API requests to Flask backend (no /api prefix needed)
              location /health {
                  proxy_pass http://127.0.0.1:5000/health;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /products {
                  proxy_pass http://127.0.0.1:5000/products;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              # Handle products with paths (like /products/1 or /products/category/Electronics)
              location ~ ^/products/ {
                  proxy_pass http://127.0.0.1:5000$request_uri;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_CONF
      - name: Create systemd service file
        run: |
          cat > catalog.service <<EOF
          [Unit]
          Description=Catalog Server Flask Application
          After=network.target

          [Service]
          Type=simple
          User=catalog
          Group=catalog
          WorkingDirectory=/opt/catalog-server/backend
          Environment=PATH=/opt/catalog-server/backend/venv/bin
          Environment=FLASK_ENV=production
          ExecStart=/opt/catalog-server/backend/venv/bin/gunicorn --bind 127.0.0.1:5000 --workers 3 app:app
          Restart=always
          RestartSec=3
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}
          EC2_USER: ubuntu
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          echo "Deploying to EC2: $EC2_HOST"

          scp -i ec2-key.pem -o StrictHostKeyChecking=no -r backend $EC2_USER@$EC2_HOST:/tmp/
          scp -i ec2-key.pem -o StrictHostKeyChecking=no -r frontend/build $EC2_USER@$EC2_HOST:/tmp/frontend
          scp -i ec2-key.pem -o StrictHostKeyChecking=no catalog.service $EC2_USER@$EC2_HOST:/tmp/
          scp -i ec2-key.pem -o StrictHostKeyChecking=no backend_env $EC2_USER@$EC2_HOST:/tmp/
          scp -i ec2-key.pem -o StrictHostKeyChecking=no nginx-catalog.conf $EC2_USER@$EC2_HOST:/tmp/

          ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<'EOF'
            sudo systemctl stop catalog || true

            # Create directories and copy files
            sudo mkdir -p /opt/catalog-server/backend /opt/catalog-server/frontend
            sudo cp -r /tmp/backend/* /opt/catalog-server/backend/
            sudo cp -r /tmp/frontend/* /opt/catalog-server/frontend/
            sudo cp /tmp/backend_env /opt/catalog-server/backend/.env
            sudo chown -R catalog:catalog /opt/catalog-server
            sudo chmod -R 755 /opt/catalog-server

            # Debug: Check if frontend files exist and structure
            echo 'Checking frontend files...'
            ls -la /opt/catalog-server/frontend/
            echo 'Checking for index.html...'
            ls -la /opt/catalog-server/frontend/index.html || echo 'index.html not found!'
            echo 'Checking build directory structure...'
            find /opt/catalog-server/frontend/ -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

            # Ensure virtual environment exists
            if [ ! -d "/opt/catalog-server/backend/venv" ]; then
              echo 'Creating virtual environment...'
              sudo -u catalog bash -c 'cd /opt/catalog-server/backend && python3 -m venv venv'
            fi

            echo 'Installing Python dependencies...'
            sudo -u catalog bash -c 'cd /opt/catalog-server/backend && source venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt'

            echo 'Testing Flask-CORS import...'
            sudo -u catalog bash -c 'cd /opt/catalog-server/backend && source venv/bin/activate && python -c "from flask_cors import CORS; print(\"Flask-CORS imported successfully\")"' || echo 'Flask-CORS import failed'

            echo 'Testing Flask app import...'
            sudo -u catalog bash -c 'cd /opt/catalog-server/backend && source venv/bin/activate && python -c "import sys; exec(\"try:\\n    from app import app\\n    print(\\\"Flask app imported successfully\\\")\\nexcept Exception as e:\\n    print(\\\"Flask app import failed:\\\", str(e))\")"' || echo 'Flask app import test completed'

            # Initialize database tables
            echo 'Initializing database...'
            sudo -u catalog bash -c 'cd /opt/catalog-server/backend && source venv/bin/activate && python -c "import sys; exec(\"try:\\n    from app import app, db\\n    with app.app_context():\\n        db.create_all()\\n        print(\\\"Database tables created successfully\\\")\\nexcept Exception as e:\\n    print(\\\"Database initialization failed:\\\", str(e))\")"' || echo 'Database initialization completed with errors'

            sudo cp /tmp/catalog.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable catalog
            sudo systemctl start catalog

            sleep 10
            if sudo systemctl is-active --quiet catalog; then
              echo 'Catalog service started successfully'
            else
              echo 'Service failed to start, checking logs:'
              sudo journalctl -u catalog --no-pager -n 20
            fi

            # Configure nginx for the application
            echo 'Configuring nginx...'
            sudo cp /tmp/nginx-catalog.conf /etc/nginx/sites-available/catalog-server
            sudo ln -sf /etc/nginx/sites-available/catalog-server /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Debug nginx config
            echo 'Testing nginx configuration...'
            sudo nginx -t
            
            # Debug: Check what nginx is actually serving
            echo 'Checking nginx sites-enabled...'
            ls -la /etc/nginx/sites-enabled/
            
            echo 'Checking nginx config content...'
            sudo cat /etc/nginx/sites-available/catalog-server
            
            sudo systemctl restart nginx
            
            # Test if nginx is serving files correctly
            echo 'Testing nginx file serving...'
            curl -I http://localhost/ || echo 'Nginx not responding on localhost'
          EOF

          rm ec2-key.pem catalog.service backend_env nginx-catalog.conf

      - name: Health check
        env:
          API_URL: http://${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}
          EC2_HOST: ${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}
          EC2_USER: ubuntu
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem

          echo "Waiting for services to start..."
          sleep 45

          echo "=== Debugging Frontend Files ==="
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<'EOF'
            echo 'Frontend directory contents:'
            ls -la /opt/catalog-server/frontend/
            
            echo 'Looking for index.html:'
            find /opt/catalog-server/frontend/ -name "index.html" -type f
            
            echo 'Nginx error logs:'
            sudo tail -n 20 /var/log/nginx/error.log || echo 'No nginx error log found'
            
            echo 'Nginx access logs:'
            sudo tail -n 10 /var/log/nginx/access.log || echo 'No nginx access log found'
            
            echo 'Testing direct file access:'
            curl -I http://localhost/index.html || echo 'index.html not accessible'
          EOF

          echo "=== Service Health Check ==="
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<'EOF'
            echo 'Catalog service status:'
            sudo systemctl status catalog --no-pager || true

            echo 'Service logs:'
            sudo journalctl -u catalog --no-pager -n 20 || true

            echo 'Port check:'
            sudo ss -tlnp | grep :5000 || echo 'Port 5000 not listening'

            echo 'Testing health endpoint:'
            curl -f http://localhost:5000/health || echo 'Health endpoint failed'
          EOF

          echo "=== External Health Check ==="
          if curl -f $API_URL/health; then
            echo "✅ Health check passed"
            curl -f $API_URL/products && echo "✅ Products endpoint passed" || echo "❌ Products endpoint failed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

          rm ec2-key.pem

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ✅ Existing | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Application | ✅ Deployed | http://${{ needs.deploy-infrastructure.outputs.ec2_public_ip }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Health | ✅ Healthy | http://${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}/health |" >> $GITHUB_STEP_SUMMARY